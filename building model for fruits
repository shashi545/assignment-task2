{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOIKwvcVNcZDYN0gLttbjAH",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shashi545/assignment-task2/blob/main/building%20model%20for%20fruits\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lLXoZ2O8U5Rv"
      },
      "source": [
        "train_path='/content/drive/My Drive/Shashi (1)/fruits/train'\n",
        "test_path='/content/drive/My Drive/Shashi (1)/fruits/test'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghPL6SWEOd5U"
      },
      "source": [
        "**IMPORTING THE LIBRARIES**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PRT1JiuOGM7K"
      },
      "source": [
        "import numpy as np\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "from imutils import paths\n",
        "from keras.applications.vgg16 import VGG16\n",
        "from tensorflow.keras.layers import AveragePooling2D\n",
        "from tensorflow.keras.layers import Dropout\n",
        "from tensorflow.keras.layers import Flatten,Conv2D,MaxPool2D\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Input\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.applications.vgg16 import preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.preprocessing.image import load_img\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "import keras,os\n",
        "from keras.models import Sequential\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OhDAN6J6OXVt"
      },
      "source": [
        "train_path='/content/drive/My Drive/Shashi (1)/fruits/train'\n",
        "test_path='/content/drive/My Drive/Shashi (1)/fruits/test'\n",
        "imagePaths=list(paths.list_images(train_path))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pCnSERuhPVTm"
      },
      "source": [
        "data=[]\n",
        "labels=[]\n",
        "\n",
        "for i in imagePaths:\n",
        "    label=i.split(os.path.sep)[-2]\n",
        "    labels.append(label)\n",
        "    image=load_img(i,target_size=(224,224))\n",
        "    image=img_to_array(image)\n",
        "    image=preprocess_input(image)\n",
        "    data.append(image)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NeahrR4lP8YA"
      },
      "source": [
        "data=np.array(data,dtype='float32')\n",
        "labels=np.array(labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZeS3I_kmSfRq"
      },
      "source": [
        "lb=LabelBinarizer()\n",
        "labels=lb.fit_transform(labels)\n",
        "labels=to_categorical(labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q69Oo1P8JE1D"
      },
      "source": [
        "train_X,test_X,train_Y,test_Y=train_test_split(data,labels,test_size=0.20,stratify=labels,random_state=30)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f2UYwWgeBRwH"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R6xUwVLrS4kR"
      },
      "source": [
        "baseModel=VGG16(weights='imagenet',include_top=False,input_tensor=Input(shape=(224,224,3)))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PncvEJYKHEeP",
        "outputId": "2ba5d883-717d-4085-beeb-b89008b7f93e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(baseModel.summary())\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"vgg16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_3 (InputLayer)         [(None, 224, 224, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
            "=================================================================\n",
            "Total params: 14,714,688\n",
            "Trainable params: 14,714,688\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aTVgqxYLHJhR"
      },
      "source": [
        "headModel=baseModel.output\n",
        "headModel=AveragePooling2D(pool_size=(7,7))(headModel)\n",
        "headModel=Flatten(name='Flatten')(headModel)\n",
        "headModel=Dense(128,activation='relu')(headModel)\n",
        "headModel=Dropout(0.5)(headModel)\n",
        "headModel=Dense(2,activation='softmax')(headModel)\n",
        "\n",
        "model=Model(inputs=baseModel.input,outputs=headModel)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2Wlz2TumHxFS"
      },
      "source": [
        "for layer in baseModel.layers:\n",
        "    layer.trainable=False\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YaNkltqSH2Pg",
        "outputId": "e8cc5b34-f307-42a6-8aa6-30429c16ae0b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(model.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"functional_5\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_3 (InputLayer)         [(None, 224, 224, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
            "_________________________________________________________________\n",
            "average_pooling2d_2 (Average (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "Flatten (Flatten)            (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 128)               65664     \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 2)                 258       \n",
            "=================================================================\n",
            "Total params: 14,780,610\n",
            "Trainable params: 65,922\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FP7gzdddH6df",
        "outputId": "3bff374c-4b47-4deb-93e8-d70a2cecae41",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "learning_rate=0.001\n",
        "Epochs=10\n",
        "BS=8\n",
        "\n",
        "opt=Adam(lr=learning_rate,decay=learning_rate/Epochs)\n",
        "model.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])\n",
        "H=model.fit(train_X,train_Y,batch_size=BS,\n",
        "            steps_per_epoch=len(train_X)//BS,\n",
        "            validation_data=(test_X,test_Y),\n",
        "            validation_steps=len(test_X)//BS,\n",
        "            epochs=Epochs)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "123/123 [==============================] - 16s 128ms/step - loss: 0.2166 - accuracy: 0.9705 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 2/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 1.1653e-05 - accuracy: 1.0000 - val_loss: 3.7253e-10 - val_accuracy: 1.0000\n",
            "Epoch 3/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 5.8603e-06 - accuracy: 1.0000 - val_loss: 1.2418e-10 - val_accuracy: 1.0000\n",
            "Epoch 4/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 3.1639e-06 - accuracy: 1.0000 - val_loss: 1.2418e-10 - val_accuracy: 1.0000\n",
            "Epoch 5/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 5.6973e-05 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 6/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 1.0732e-04 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 7/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 5.8249e-06 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 8/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 6.0416e-06 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 9/10\n",
            "123/123 [==============================] - 16s 127ms/step - loss: 6.4854e-06 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n",
            "Epoch 10/10\n",
            "123/123 [==============================] - 16s 126ms/step - loss: 1.2292e-06 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0YUNyr9hID8R",
        "outputId": "04ed2db2-16d3-4d38-cf4b-e64936a5baa6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.save('/content/drive/My Drive/Shashi (1)/vgg16.model')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /content/drive/My Drive/Shashi (1)/vgg16.model/assets\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4WVNE95kJPLp",
        "outputId": "951dcda1-25ef-424d-fb3d-b2cd02a86de0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "predict=model.predict(test_X,batch_size=BS)\n",
        "predict=np.argmax(predict,axis=1)\n",
        "print(classification_report(test_Y.argmax(axis=1),predict,target_names=lb.classes_))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Banana       1.00      1.00      1.00       138\n",
            "       apple       1.00      1.00      1.00       109\n",
            "\n",
            "    accuracy                           1.00       247\n",
            "   macro avg       1.00      1.00      1.00       247\n",
            "weighted avg       1.00      1.00      1.00       247\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_A6H-IQSphLY"
      },
      "source": [
        "test_path='/content/drive/My Drive/Shashi (1)/fruits/test'\n",
        "imagePaths1=list(paths.list_images(test_path))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N6_JfLDCiiIb",
        "outputId": "a80751b5-9015-45b9-f9c1-209692310867",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "imagePaths1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/content/drive/My Drive/Shashi (1)/fruits/test/319_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/320_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/297_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/267_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/303_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/312_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/318_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/307_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/306_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/314_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/269_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/309_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/266_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/315_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/268_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/316_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/317_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/302_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_13_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/313_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/310_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/304_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_14_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/300_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/305_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/299_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/301_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/296_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/308_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/311_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/298_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/271_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/272_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_2_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_8_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/295_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_10_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/285_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/281_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/273_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/284_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/286_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/270_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/274_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_6_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/280_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_11_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/291_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/279_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_1_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/287_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/276_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/289_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/278_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/292_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_9_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/283_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/288_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/290_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_0_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/275_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_12_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_4_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_5_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/277_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/293_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/282_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/294_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_3_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/r_7_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/15_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/26_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/8_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/22_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/17_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/16_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/28_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/23_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/4_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/11_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/3_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/20_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/10_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/30_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/18_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/13_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/35_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/29_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/14_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/6_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/9_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/31_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/1_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/37_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/24_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/7_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/21_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/0_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/27_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/5_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/32_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/19_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/12_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/2_100.jpg',\n",
              " '/content/drive/My Drive/Shashi (1)/fruits/test/25_100.jpg']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChStDKb0p_iw"
      },
      "source": [
        "data1=[]\n",
        "labels1=[]\n",
        "\n",
        "for i in imagePaths1:\n",
        "    label=i.split(os.path.sep)[-2]\n",
        "    labels1.append(label)\n",
        "    image=load_img(i,target_size=(224,224))\n",
        "    image=img_to_array(image)\n",
        "    image=preprocess_input(image)\n",
        "    data1.append(image)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJMe9RMuqS40"
      },
      "source": [
        "data1=np.array(data1,dtype='float32')\n",
        "labels1=np.array(labels1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u0b_Z_Nwt_Cr",
        "outputId": "6f68849f-d9bc-4d11-c42b-c74d816eac06",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "data1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]],\n",
              "\n",
              "\n",
              "       [[[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]],\n",
              "\n",
              "\n",
              "       [[[150.061  , 138.22101, 126.32   ],\n",
              "         [150.061  , 138.22101, 126.32   ],\n",
              "         [150.061  , 138.22101, 127.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[150.061  , 138.22101, 126.32   ],\n",
              "         [150.061  , 138.22101, 126.32   ],\n",
              "         [150.061  , 138.22101, 127.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[150.061  , 138.22101, 126.32   ],\n",
              "         [150.061  , 138.22101, 126.32   ],\n",
              "         [151.061  , 138.22101, 130.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]],\n",
              "\n",
              "\n",
              "       ...,\n",
              "\n",
              "\n",
              "       [[[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]],\n",
              "\n",
              "\n",
              "       [[[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]],\n",
              "\n",
              "\n",
              "       [[[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]],\n",
              "\n",
              "        [[151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         ...,\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ],\n",
              "         [151.061  , 138.22101, 131.32   ]]]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CPqM8HCAq_oT"
      },
      "source": [
        "lb=LabelBinarizer()\n",
        "labels1=lb.fit_transform(labels1)\n",
        "labels1=to_categorical(labels1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y7leZheMrKf2",
        "outputId": "94f24cc2-1201-4edc-c081-3f5b62856f3f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "predict1=model.predict(data1)\n",
        "predict1=np.argmax(predict1,axis=1)\n",
        "print(classification_report(labels1.argmax(axis=1),predict1))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.33      0.50       105\n",
            "           1       0.00      0.00      0.00         0\n",
            "\n",
            "    accuracy                           0.33       105\n",
            "   macro avg       0.50      0.17      0.25       105\n",
            "weighted avg       1.00      0.33      0.50       105\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhmjedaCsfQU",
        "outputId": "ee2f92c7-cb30-430f-90e4-b9d033a137ad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "from keras.preprocessing import image\n",
        "img = image.load_img(\"/content/drive/My Drive/Shashi (1)/fruits/test/32_100.jpg\",target_size=(224,224))\n",
        "img = np.asarray(img)\n",
        "plt.imshow(img)\n",
        "img = np.expand_dims(img, axis=0)\n",
        "from keras.models import load_model\n",
        "\n",
        "output = model.predict(img)\n",
        "if output[0][0] > output[0][1]:\n",
        "    print(\"banana\")\n",
        "else:\n",
        "    print('apple')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "banana\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XyEe7i_ZgYuC"
      },
      "source": [
        "from tensorflow.keras.applications.mobilenet_v2 import preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.models import load_model\n",
        "import numpy as np\n",
        "import cv2\n",
        "import os\n",
        "from imutils.video import VideoStream\n",
        "import imutils"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HKxTwM6rZvI5"
      },
      "source": [
        "def detect_and_predict_mask(frame,faceNet,maskNet):\n",
        "    #grab the dimensions of the frame and then construct a blob\n",
        "    (h,w)=frame.shape[:2]\n",
        "    blob=cv2.dnn.blobFromImage(frame,1.0,(300,300),(104.0,177.0,123.0))\n",
        "    \n",
        "    faceNet.setInput(blob)\n",
        "    detections=faceNet.forward()\n",
        "    \n",
        "    #initialize our list of faces, their corresponding locations and list of predictions\n",
        "    \n",
        "    faces=[]\n",
        "    locs=[]\n",
        "    preds=[]\n",
        "    \n",
        "    \n",
        "    for i in range(0,detections.shape[2]):\n",
        "        confidence=detections[0,0,i,2]\n",
        "    \n",
        "    \n",
        "        if confidence>0.5:\n",
        "        #we need the X,Y coordinates\n",
        "            box=detections[0,0,i,3:7]*np.array([w,h,w,h])\n",
        "            (startX,startY,endX,endY)=box.astype('int')\n",
        "        \n",
        "            #ensure the bounding boxes fall within the dimensions of the frame\n",
        "            (startX,startY)=(max(0,startX),max(0,startY))\n",
        "            (endX,endY)=(min(w-1,endX), min(h-1,endY))\n",
        "        \n",
        "            #extract the face ROI, convert it from BGR to RGB channel, resize it to 224,224 and preprocess it\n",
        "            face=frame[startY:endY, startX:endX]\n",
        "            face=cv2.cvtColor(face,cv2.COLOR_BGR2RGB)\n",
        "            face=cv2.resize(face,(224,224))\n",
        "            face=img_to_array(face)\n",
        "            face=preprocess_input(face)\n",
        "        \n",
        "            faces.append(face)\n",
        "            locs.append((startX,startY,endX,endY))\n",
        "        \n",
        "        #only make a predictions if atleast one face was detected\n",
        "        if len(faces)>0:\n",
        "            faces=np.array(faces,dtype='float32')\n",
        "            preds=maskNet.predict(faces,batch_size=12)\n",
        "        \n",
        "        return (locs,preds)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dyew7R1kZ-lL",
        "outputId": "4f2026ea-efbb-4c0c-85e7-f9c6ff89fd70",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "! samples/dnn/face_detector/deploy.prototxt"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/bin/bash: samples/dnn/face_detector/deploy.prototxt: No such file or directory\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f3Yk3SK6PDr2",
        "outputId": "13f7ee8b-c264-4736-8117-5b2c07b77ff4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!wget https://github.com/opencv/opencv/blob/master/samples/dnn/face_detector/deploy.prototxt"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-11-07 15:09:21--  https://github.com/opencv/opencv/blob/master/samples/dnn/face_detector/deploy.prototxt\n",
            "Resolving github.com (github.com)... 140.82.112.4\n",
            "Connecting to github.com (github.com)|140.82.112.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified [text/html]\n",
            "Saving to: ‘deploy.prototxt.1’\n",
            "\n",
            "deploy.prototxt.1       [ <=>                ] 436.84K  --.-KB/s    in 0.02s   \n",
            "\n",
            "2020-11-07 15:09:21 (19.1 MB/s) - ‘deploy.prototxt.1’ saved [447322]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "shmmoQ0bPr6k"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}